# -*- coding: utf-8 -*-
"""DS_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g9gGsjzoU3N432L9ZdvmoXG9IZdF_hYD
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

pip install streamlit

from google.colab import drive
drive.mount("/content/drive")

Credit_Data=pd.read_csv("/content/drive/My Drive/Datascience_Project/creditcard_2023.csv")
Credit_Data.shape

Credit_Data.info()

Credit_Data["Class"].value_counts()

Credit_Data.tail()

Fraud_Data=Credit_Data.loc[Credit_Data['Class']==1]
NonFraud_Data=Credit_Data.loc[Credit_Data['Class']==0]

print("Total records of Fraud:",len(Fraud_Data))
print("Total records of Non Fraudulent:",len(NonFraud_Data))

#sns.relplot(x="Amount",y="id",hue="Class",data=Credit_Data)
XData=Credit_Data.drop(['Class'],axis=1)
YData=Credit_Data['Class']
print(XData.shape)
print(YData.shape)

X=XData.values
Y=YData.values

x_train, x_test, y_train, y_test = train_test_split(
    X, Y, test_size=0.33, random_state=125
)

#Logistic_Regression
LR_Model=LogisticRegression()
LR_Model.fit(x_train,y_train)

y_predict_Lr=LR_Model.predict(x_test)

print(y_predict_Lr)

# Calculate Accuracy
accuracy_Lr=accuracy_score(y_test,y_predict_Lr)
print("Accurracy score:{}".format(accuracy_Lr*100))

# Calculate confusion matrix
confusion_matrix_Lr = confusion_matrix(y_test, y_predict_Lr)
print("confusion_matrix:\n",confusion_matrix_Lr)

#Calculate Classification Report
print("Classification Report: \n ", classification_report(y_test,y_predict_Lr))

#NAIVE BAYES CLASSIFIER
Naive_Model=GaussianNB()
Naive_Model.fit(x_train,y_train)
y_predict_NB=Naive_Model.predict(x_test)
print("Y_Predict:\n",y_predict_NB)

#Accuracy
Accuracy_NB=accuracy_score(y_test,y_predict_NB)
print("Accurracy score:{}".format(Accuracy_NB*100))

# Calculate confusion matrix
confusion_matrix_NB = confusion_matrix(y_test, y_predict_NB)
print("confusion_matrix:\n",confusion_matrix_NB)

#Calculate Classification Report
print("Classification Report: \n ", classification_report(y_test,y_predict_NB))

#Decision Tree Classifier
DT_Model=DecisionTreeClassifier()
DT_Model.fit(x_train,y_train)
y_predict_DT=DT_Model.predict(x_test)
print("Y_Predict: ",y_predict_NB)

#Calculate Accuracy
accuracy_DT=accuracy_score(y_test,y_predict_DT)
print("Accurracy score:{}".format(accuracy_DT*100))

# Calculate confusion matrix
confusion_matrix_DT = confusion_matrix(y_test, y_predict_DT)
print("confusion_matrix:\n",confusion_matrix_DT)

#Calculate Classification Report
print("Classification Report: \n ", classification_report(y_test,y_predict_DT))

#KNeighborsClassifier
knn_model = KNeighborsClassifier(n_neighbors=25)
knn_model.fit(x_train, y_train)

y_predict_knn = knn_model.predict(x_test)
print("Y_Predict: ",y_predict_knn)

#Calculate Acurracy
Accuracy_knn=accuracy_score(y_test,y_predict_knn)
print("Accuracy:{}".format(Accuracy_knn*100))

#Confusion Matrix
confusionMatric_knn=confusion_matrix(y_test,y_predict_knn)
print("confusion_matrix:\n",confusionMatric_knn)

#Calculate Classification Report
print("Classification Report: \n ", classification_report(y_test,y_predict_knn))

#Support Vector Machine Algorithm
SVM_Model =SVC(kernel='linear')
SVM_Model.fit(x_train,y_train)
y_predict_svm=SVM_Model.predict(x_test)

#Calculate Acurracy
accuracy_svm=accuracy_score(y_test,y_predict_svm)
print("Accuracy:{}".format(accuracy_svm*100))

#Confusion Matrix
confusionMatric_svm=confusion_matrix(y_test,y_predict_svm)
print("confusion_matrix:\n",confusionMatric_svm)

#Calculate Classification Report
print("Classification Report: \n ", classification_report(y_test,y_predict_svm))

# create Streamlit app
import streamlit as st
st.title("Credit Card Fraud Detection Model")
st.write("Enter the following features to check if the transaction is legitimate or fraudulent:")

# create input fields for user to enter feature values
input_df = st.text_input('Input All features')
input_df_lst = input_df.split(',')
# create a button to submit input and get prediction
submit = st.button("Submit")

if submit:
    # get input feature values
    features = np.array(input_df_lst, dtype=np.float64)
    # make prediction
    prediction =LR_Model.predict(features.reshape(1,-1))
    # display result
    if prediction[0] == 0:
        st.write("Legitimate transaction")
    else:
        st.write("Fraudulent transaction")



